package generator

import (
	"fmt"
	"strings"
	"text/template"

	pd "github.com/golang/protobuf/protoc-gen-go/descriptor"
)

type gatewayTemplate struct {
	Generator *Generator
	File      *File
	Imports   []*GoPackage
}

func (g *gatewayTemplate) GetClassName(msg *Message) string {
	if msg.File == g.File {
		return msg.GetName()
	}

	for _, pkg := range g.Imports {
		if msg.File.GoPkg.Path == pkg.Path {
			return fmt.Sprintf("%s.%s", pkg.Alias, msg.GetName())
		}
	}

	return ""
}

func (g *gatewayTemplate) FuncTemplate(s *Service, m *Method, b *Binding) string {
	var resClass string

	if m.GetServerStreaming() {
		resClass = fmt.Sprintf("%s_%sClient", s.GetName(), m.GetName())
	} else {
		resClass = "*" + g.GetClassName(m.ResponseType)
	}

	return fmt.Sprintf("func request_%s_%s_%d(ctx context.Context, r *fasthttp.RequestCtx, client %sClient, req *%s) (%s, *gateway.Metadata, error) {", s.GetName(), m.GetName(), b.Index, s.GetName(), g.GetClassName(m.RequestType), resClass)
}

func (g *gatewayTemplate) PathTemplate(b *Binding) string {
	result := ""

	for _, param := range b.Path.Params {
		field := b.Method.RequestType.LookupField(param)
		lhs := fmt.Sprintf("req.%s", strings.Title(field.GetName()))
		rhs := "v"
		converter := g.ConvertStringField(field, lhs, rhs)

		if converter == "" {
			continue
		}

		result += fmt.Sprintf("if %s, ok := r.UserValue(%q).(string); ok { %s }\n", rhs, field.GetName(), converter)
	}

	return result
}

func (g *gatewayTemplate) QueryTemplate(b *Binding) string {
	result := ""
	excluded := map[string]bool{}

	// All fields are body
	if b.Body == "*" {
		return ""
	}

	// Exclude body field
	if b.Body != "" {
		excluded[b.Body] = true
	}

	// Exclude path params
	for _, param := range b.Path.Params {
		excluded[param] = true
	}

	for _, field := range b.Method.RequestType.Fields {
		if excluded[field.GetName()] {
			continue
		}

		lhs := fmt.Sprintf("req.%s", strings.Title(field.GetName()))
		rhs := "values"
		converter := g.ConvertStringArrayField(field, lhs, rhs, true)

		if converter == "" {
			continue
		}

		result += fmt.Sprintf("if %s := r.QueryArgs().PeekMulti(%q); len(%s) > 0 { %s }\n", rhs, field.GetName(), rhs, converter)
	}

	return result
}

func (g *gatewayTemplate) BodyTemplate(b *Binding) string {
	if b.Body == "" {
		return ""
	}

	result := ""

	if b.Body == "*" {
		result += "body := req\n"
	} else {
		result += fmt.Sprintf("body := req.%s\n", strings.Title(b.Body))
	}

	body := ""

	for _, field := range b.BodyType.Fields {
		lhs := fmt.Sprintf("body.%s", strings.Title(field.GetName()))
		rhs := "values"
		converter := g.ConvertStringArrayField(field, lhs, rhs, false)

		if converter == "" {
			continue
		}

		body += fmt.Sprintf("if %s, ok := query[%q]; ok && len(%s) > 0 { %s }\n", rhs, field.GetName(), rhs, converter)
	}

	result += fmt.Sprintf(`
if gateway.IsBodyURLEncoded(r) {
  query, err := url.ParseQuery(string(r.Request.Body()))

  if err != nil {
    return nil, nil, err
  }

  %s
} else {
  if err := json.Unmarshal(r.Request.Body(), body); err != nil {
    return nil, nil, err
  }
}`, body)

	return result
}

func (g *gatewayTemplate) IsEmptyResponse(b *Binding) bool {
	return b.Method.ResponseType.FQMN == ".google.protobuf.Empty"
}

func (g *gatewayTemplate) ConvertStringField(field *Field, lhs string, rhs string) string {
	switch field.GetType() {
	case pd.FieldDescriptorProto_TYPE_BYTES:
		return fmt.Sprintf("%s = []byte(%s)", lhs, rhs)
	case pd.FieldDescriptorProto_TYPE_STRING:
		return fmt.Sprintf("%s = %s", lhs, rhs)
	}

	if fn, ok := convertStringFuncMap[field.GetType()]; ok {
		v := fmt.Sprintf(fn, rhs)
		return fmt.Sprintf("if v, err := %s; err == nil { %s = v } else { return nil, nil, err }\n", v, lhs)
	}

	return ""
}

func (g *gatewayTemplate) ConvertStringArrayField(field *Field, lhs string, rhs string, isBytes bool) string {
	if field.GetLabel() != pd.FieldDescriptorProto_LABEL_REPEATED {
		var v string

		if isBytes {
			v = fmt.Sprintf("string(%s[0])", rhs)
		} else {
			v = rhs + "[0]"
		}

		return g.ConvertStringField(field, lhs, v)
	}

	if elem, ok := protoTypeMap[field.GetType()]; ok {
		v := "v"

		if isBytes {
			v = "string(v)"
		}

		converter := g.ConvertStringField(field, lhs+"[i]", v)

		return fmt.Sprintf(`
%s = make([]%s, len(%s))

for i, v := range %s {
  %s
}`, lhs, elem, rhs, rhs, converter)
	}

	return ""
}

func (g *gatewayTemplate) GetQueryFields(m *Method, b *Binding) []*Field {
	result := []*Field{}
	excluded := map[string]bool{}

	// Exclude body params
	if b.Body == "*" {
		return result
	} else if b.Body != "" {
		excluded[b.Body] = true
	}

	// Exclude path params
	for _, p := range b.Path.Params {
		excluded[p] = true
	}

	for _, field := range m.RequestType.Fields {
		if !excluded[field.GetName()] {
			result = append(result, field)
		}
	}

	return result
}

var (
	gatewayTmpl = template.Must(template.New("gateway").Parse(`
// Code generated by protoc-gen-fasthttp-grpc-gateway
// source: {{.File.GetName}}
// DO NOT EDIT!

package {{.File.GetPackageName}}

import (
  {{range $i := .Imports}}{{$i.String | printf "%s\n"}}{{end}}
)

{{range $svc := .File.Services}}
{{range $m := $svc.Methods}}
{{range $b := $m.Bindings}}
{{$.FuncTemplate $svc $m $b}}
  var err error
  ctx, err = gateway.AnnotateContext(ctx, r)

  if err != nil {
		return nil, nil, err
  }

  {{$.PathTemplate $b}}
  {{$.QueryTemplate $b}}
  {{$.BodyTemplate $b}}

	meta := new(gateway.Metadata)
  res, err := client.{{$m.GetName}}(ctx, req, grpc.Header(&meta.Header), grpc.Trailer(&meta.Trailer))
	return res, meta, err
}
{{end}}
{{end}}

func Register{{$svc.GetName}}Handler(ctx context.Context, gw *gateway.Gateway, conn *grpc.ClientConn) {
  client := New{{$svc.GetName}}Client(conn)

  {{range $m := $svc.Methods}}
  {{range $b := $m.Bindings}}
  gw.{{$b.HTTPMethod.String}}({{$b.Path.Path | printf "%q"}}, func (r *fasthttp.RequestCtx) {
    req := new({{$.GetClassName $m.RequestType}})
    res, meta, err := request_{{$svc.GetName}}_{{$m.GetName}}_{{$b.Index}}(ctx, r, client, req)

		if err != nil {
			if meta != nil {
				gw.ResponseErrorHandler(r, meta, err)
			} else {
				gw.MarshalErrorHandler(r, err)
			}
			
			return
		}

		{{if $m.GetServerStreaming}}
		gw.ResponseStreamMarshaler(r, meta, func() (proto.Message, error) {
			return res.Recv()
		})
		{{else}}
		gw.ResponseMarshaler(r, meta, res)
		{{end}}
  })
  {{end}}
  {{end}}
}

func Register{{$svc.GetName}}HandlerFromEndpoint(ctx context.Context, g *gateway.Gateway, endpoint string, opts ...grpc.DialOption) error {
  conn, err := grpc.Dial(endpoint, opts...)

  if err != nil {
    return err
  }

  Register{{$svc.GetName}}Handler(ctx, g, conn)
  return nil
}
{{end}}`))

	protoTypeMap = map[pd.FieldDescriptorProto_Type]string{
		pd.FieldDescriptorProto_TYPE_BYTES:    "[]byte",
		pd.FieldDescriptorProto_TYPE_STRING:   "string",
		pd.FieldDescriptorProto_TYPE_DOUBLE:   "float64",
		pd.FieldDescriptorProto_TYPE_FLOAT:    "float32",
		pd.FieldDescriptorProto_TYPE_INT64:    "int64",
		pd.FieldDescriptorProto_TYPE_SINT64:   "int64",
		pd.FieldDescriptorProto_TYPE_SFIXED64: "int64",
		pd.FieldDescriptorProto_TYPE_UINT64:   "uint64",
		pd.FieldDescriptorProto_TYPE_FIXED64:  "uint64",
		pd.FieldDescriptorProto_TYPE_INT32:    "int32",
		pd.FieldDescriptorProto_TYPE_SINT32:   "int32",
		pd.FieldDescriptorProto_TYPE_SFIXED32: "int32",
		pd.FieldDescriptorProto_TYPE_BOOL:     "bool",
		pd.FieldDescriptorProto_TYPE_UINT32:   "uint32",
		pd.FieldDescriptorProto_TYPE_FIXED32:  "uint32",
	}

	convertStringFuncMap = map[pd.FieldDescriptorProto_Type]string{
		pd.FieldDescriptorProto_TYPE_DOUBLE:   "gateway.ConvertStringToFloat64(%s)",
		pd.FieldDescriptorProto_TYPE_FLOAT:    "gateway.ConvertStringToFloat32(%s)",
		pd.FieldDescriptorProto_TYPE_INT64:    "gateway.ConvertStringToInt64(%s)",
		pd.FieldDescriptorProto_TYPE_SINT64:   "gateway.ConvertStringToInt64(%s)",
		pd.FieldDescriptorProto_TYPE_SFIXED64: "gateway.ConvertStringToInt64(%s)",
		pd.FieldDescriptorProto_TYPE_UINT64:   "gateway.ConvertStringToUint64(%s)",
		pd.FieldDescriptorProto_TYPE_FIXED64:  "gateway.ConvertStringToUint64(%s)",
		pd.FieldDescriptorProto_TYPE_INT32:    "gateway.ConvertStringToInt32(%s)",
		pd.FieldDescriptorProto_TYPE_SINT32:   "gateway.ConvertStringToInt32(%s)",
		pd.FieldDescriptorProto_TYPE_SFIXED32: "gateway.ConvertStringToInt32(%s)",
		pd.FieldDescriptorProto_TYPE_UINT32:   "gateway.ConvertStringToUint32(%s)",
		pd.FieldDescriptorProto_TYPE_FIXED32:  "gateway.ConvertStringToUint32(%s)",
		pd.FieldDescriptorProto_TYPE_BOOL:     "gateway.ConvertStringToBool(%s)",
	}
)
